const ClassMiddleSensor=require("ClassSensorArchitecture");class ClassAirMethaneMQ4 extends ClassMiddleSensor{constructor(_opts,_sensor_props){ClassMiddleSensor.apply(this,[_opts,_sensor_props]),this._Name="ClassAirMethaneMQ4",this._Sensor=require("BaseClassMQX").connect({dataPin:_opts.pin1,heatPin:_opts.pin2,model:"MQ4",r0:_opts.baseline}),this._MinPeriod=250,this._UsedChannels=[],this._Interval,this._CanRead=!0,this.Init(_sensor_props)}Init(_sensor_props){super.Init(_sensor_props)}ControlHeater(_val){this._Sensor.heat(_val)}Preheat(){this._CanRead=!1,this._Sensor.preheat(()=>{console.log("MQ-4 is heated!"),this._CanRead=!0})}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{this._UsedChannels.includes(0)&&this._CanRead&&(this.Ch0_Value=this._Sensor.read("CH4"))},period))}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}ConfigureRegs(_opts){Number.isInteger(_opts.mode)&&_opts.mode>=0&&_opts.mode<=4&&(this._CanRead=!1,setTimeout(()=>{this._Sensor.setMode(_opts.mode)},1e4),this._CanRead=!0)}Stop(_num_channel){_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassAirMethaneMQ4;